pipeline {
    agent any

    environment {
        DOTNET_CLI_HOME = '/var/jenkins_home/.dotnet'
        DOTNET_SKIP_FIRST_TIME_EXPERIENCE = '1'
        DOTNET_NOLOGO = '1'
    }

    stages {

        // =======================================================
        // 1Ô∏è‚É£ CHECKOUT
        // =======================================================
        stage('Checkout c√≥digo fuente') {
            steps {
                echo "üì• Clonando repositorio desde GitHub..."
                checkout scm
                sh 'ls -R Devops'
            }
        }

        // =======================================================
        // 2Ô∏è‚É£ DETECTAR ENTORNO SEG√öN RAMA
        // =======================================================
        stage('Detectar entorno') {
            steps {
                script {
                    def branch = env.GIT_BRANCH?.replace('origin/', '')
                    echo """

                    ‚úÖ Rama detectada: ${branch}
                    """

                    if (branch == "dev") {
                        env.ENVIRONMENT = "dev"
                    } else if (branch == "qa") {
                        env.ENVIRONMENT = "qa"
                    } else if (branch == "staging") {
                        env.ENVIRONMENT = "staging"
                    } else {
                        env.ENVIRONMENT = "prod"
                    }

                    env.COMPOSE_FILE = "Devops/${env.ENVIRONMENT}/Docker-compose.yml"
                  env.ENV_FILE = "Devops/${env.ENVIRONMENT}/.env.${env.ENVIRONMENT}"


                    echo """
                    üåé Entorno asignado: ${env.ENVIRONMENT}
                    üìÑ Compose file: ${env.COMPOSE_FILE}
                    üìÅ Env file: ${env.ENV_FILE}
                    """
                }
            }
        }

        // =======================================================
        // 3Ô∏è‚É£ COMPILAR .NET EN CONTENEDOR
        // =======================================================
        stage('Compilar .NET dentro de contenedor SDK') {
            agent {
                docker {
                    image 'mcr.microsoft.com/dotnet/sdk:9.0'    
                    args '-v /var/run/docker.sock:/var/run/docker.sock'
                }
            }
            steps {
                echo "üß± Compilando proyecto .NET..."
                sh 'dotnet restore'
                sh 'dotnet build --configuration Release'
            }
        }

        // =======================================================
        // 4Ô∏è‚É£ CONSTRUIR IMAGEN DOCKER
        // =======================================================
        stage('Construir imagen Docker') {
            steps {
                script {
                    echo "üê≥ Construyendo imagen Docker..."
                    sh """
                   docker build -t experiencias-api:${env.ENVIRONMENT} -f API/Dockerfile .

                    """
                }
            }
        }

        // =======================================================
        // 5Ô∏è‚É£ DESPLEGAR CON DOCKER COMPOSE
        // =======================================================
        stage('Desplegar') {
            steps {
                script {
                    echo "üöÄ Desplegando entorno ${env.ENVIRONMENT}..."
                    sh """
                        docker compose -f ${env.COMPOSE_FILE} --env-file ${env.ENV_FILE} up -d --build
                    """
                }
            }
        }
    }

    post {
        always {
            echo "üßπ Limpieza final del pipeline completada."
        }
        failure {
            echo "üí• Error durante el despliegue en ${env.ENVIRONMENT}"
        }
        success {
            echo "‚úÖ Despliegue exitoso en ${env.ENVIRONMENT}"
        }
    }
}
